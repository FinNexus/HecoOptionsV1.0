const FNXOracle = artifacts.require("TestFNXOracle");
const OptionsPrice = artifacts.require("OptionsPrice");
const ImpliedVolatility = artifacts.require("ImpliedVolatility");

let OptionsPool = artifacts.require("OptionsPool");
let OptionsProxy = artifacts.require("OptionsProxy");
let collateral0 = "0x0000000000000000000000000000000000000000";

const BN = require("bn.js");
contract('OptionsProxy', function (accounts){
    it('OptionsProxy getting and setting test functions', async function (){
        let oracle = await FNXOracle.new();
        let iv = await ImpliedVolatility.new();
        let price = await OptionsPrice.new(iv.address);
        let pool = await OptionsPool.new(oracle.address,price.address,iv.address);
        let options = await OptionsProxy.new(pool.address,oracle.address,price.address,iv.address);
        let result = await options.getTimeLimitation();
        assert.equal(result.toString(10),"3600","getBurnTimeLimit Error");
        result = await options.getUserOptionsID(accounts[0]);
        assert.equal(result.length,0,"getUserOptionsID Error");
        result = await options.getOptionInfoLength();
        assert.equal(result,0,"getOptionInfoLength Error");
        result = await options.getExpirationList();
        console.log(result);
        result = await options.getOccupiedCalInfo();
        assert.equal(result[0],0,"getOccupiedCalInfo Error");
        assert.equal(result[1],0,"getOccupiedCalInfo Error");
        result = await options.getTotalOccupiedCollateral();
        assert.equal(result,0,"getOccupiedCalInfo Error");
        let whiteList = [collateral0];
        result = await options.getNetWrothCalInfo(whiteList);
        console.log(result);
        result = await options.getNetWrothLatestWorth(collateral0);
        console.log(result);
        result = await options.getOptionCalRangeAll(whiteList);
        console.log(result);
        await options.addExpiration(1500);
        await options.removeExpirationList(1500);
        await options.addOperator(accounts[0]);
        await options.addOperator(accounts[1]);
        await options.setManager(accounts[0]);
        await options.setCollateralPhase(10000,10000,0,10000,10000,{from : accounts[1]});
        await options.setSharedState(0,[10000],whiteList);
    });
    it('OptionsProxy create Options test functions', async function (){
        let oracle = await FNXOracle.new();
        let iv = await ImpliedVolatility.new();
        let price = await OptionsPrice.new(iv.address);
        let pool = await OptionsPool.new(oracle.address,price.address,iv.address);
        let options = await OptionsProxy.new(pool.address,oracle.address,price.address,iv.address);
        await options.setManager(accounts[0]);
        let bn = new BN("10000000000000001",16);
        let bn1 = new BN(86400);
        bn = bn.add(bn1.shln(128));
        await options.createOptions(accounts[0],collateral0,bn,92500000000,925000000000,10000000000,50e8);
        let result = await options.getOptionsById(1);
        console.log(result);
        result = await options.getOptionsExtraById(1);
        console.log(result);
        result = await options.getUserOptionsID(accounts[0]);
        console.log(result);
        result = await options.getOptionInfoLength();
        console.log(result);
        await options.addOperator(accounts[0]);
        await options.addOperator(accounts[1]);
        await options.setManager(accounts[0]);
        await options.setCollateralPhase(10000,10000,0,10000,10000,{from : accounts[1]});
        let whiteList = [collateral0];
        await options.setSharedState(0,[10000],whiteList);
    });
});